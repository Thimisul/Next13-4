generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                     Int                          @id @default(autoincrement()) @db.SmallInt
  name                   String                       @db.VarChar(255)
  email                  String                       @unique @db.VarChar(255)
  password               String                       @db.VarChar(20)
  createdAt              DateTime?                    @default(now())
  updatedAt              DateTime?                    @updatedAt
  business               Business[]                   @relation("BusinessUserOwner")
  businessParticipations BusinessUsersParticipation[]
  transactionInOutOwner  TransactionInOut[]           @relation("owner")
  transactionInOutWith   TransactionInOut[]           @relation("with")
}

model Business {
  id                  Int                          @id @default(autoincrement()) @db.SmallInt
  userOwnerId         Int
  name                String                       @db.VarChar(255)
  initialValue        Decimal                      @default(0) @db.Money
  businessId          Int?
  createdAt           DateTime?                    @default(now())
  updatedAt           DateTime?                    @updatedAt
  businessOwner       Business?                    @relation("BusinessOwnerDependents", fields: [businessId], references: [id])
  businessDependents  Business[]                   @relation("BusinessOwnerDependents")
  userOwner           User                         @relation("BusinessUserOwner", fields: [userOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usersParticipations BusinessUsersParticipation[]
  transactions        TransactionInOut[]
}

model BusinessUsersParticipation {
  userId     Int
  businessId Int
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  business   Business  @relation(fields: [businessId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@id([userId, businessId])
}

model TransactionInOut {
  cod             Int             @id @default(autoincrement()) @db.SmallInt
  businessOwnerId Int
  userOwnerId     Int
  withUserId      Int
  value           Decimal         @db.Money
  date            DateTime
  description     String          @db.VarChar(255)
  type            TransactionType
  createdAt       DateTime?       @default(now())
  updatedAt       DateTime?       @updatedAt
  businessOwner   Business        @relation(fields: [businessOwnerId], references: [id])
  userOwner       User            @relation("owner", fields: [userOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userWith        User            @relation("with", fields: [withUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum TransactionType {
  IN
  OUT
}
